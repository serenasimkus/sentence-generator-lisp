Serena Simkus
sks2187
COMS 4701: AI
Assignment 1

Sentence Generator in Lisp

Part I:
My grammar:
(defparameter *grammar*
  '((S -> (IndClause) (SubConj IndClause VP) (IndClause Conj IndClause))
	(IndClause -> (NP VP) (NThere VP) (Adv NP VP))
	(NP -> (Adj NP) (NP PP) (N) (NP RelativeClause PP) (NP Conj NP) (NPSpecific) (Adj PP) (Pronoun) (N NP) (NPSpecific NP))
	(NPSpecific -> (DetSingular Adj NSingular) (DetPlural Adj NPlural) (Adj NSingular) (Adj NPlural) (DetSingular NSingular) (DetPlural NPlural))
	(VP -> (VP NP) (Aux Vs NP) (Aux Vs) (Aux Adv VP) (V) (VtakeInfinitive InfinitiveVP) (Vs Adv) (Aux VP))
	(PP -> (Prep NP))
	(RelativeClause -> (RCConjunction VP))
	(RCConjunction -> that which who)
	(InfinitiveVP -> (to IntransitiveV) (to IntransitiveV Adv) (to be) (to be Adj) (to be DetSingular NSingular) (to be DetPlural NPlural) (to TransitiveV) (to TransitiveV Adv)
	(VtakeInfinitive -> tend (be able))
	(DetSingular -> the this a)
	(DetPlural -> the several (a few))
	(Pronoun -> it he she you)
	(N -> NSingular NPlural)
	(NSingular -> education narrative polarization job business health care strategy intent asteroid eye prosecution death penalty case defense judge computer cookie)
	(NPlural -> gains industries services astronomers telescopes weeks cases jobs cookies)
	(NThere -> there)
	(SubConj -> whether)
	(Adj -> higher prevailing solid professional flawed desired visible naked amateur decided their)
	(V -> Vs SpecialV)
	(Vs -> IntransitiveV IntransitiveVPast TransitiveV)
	(SpecialV -> SingularSpecialV PluralSpecialV)
	(PluralSpecialV -> were)
	(SingularSpecialV -> was)
	(TransitiveV -> counter achieve see seek)
	(IntransitiveV -> counter pay achieve be see seek decide)
	(IntransitiveVPast -> made)
	(Prep -> of in to with (such as))
	(Conj -> and or but for nor yet so)
	(Aux -> must should will have)
	(Adv -> well hardly not now))
	"A grammar for a trivial subset of English.")

I decided to shorten some of the names of my non-terminals in my grammar to make the notation shorter and easier to add on to. I made all non-terminal symbols begin with a capital letter. 
In the beginning I also decided to change 'Article' to singular and plural determiners, based on the example given in class ('DetSingular', 'DetPlural'). 

For the first two sentences, I drew parse trees to try and figure out general rules I would need to add. I realized from the first word of the first sentence that I would need to add adjectives, and that adjectives are generally followed by nouns, or noun phrases, so I added the rule NP -> Adj NP. I also decided to group 'must' as an auxiliary verb, and added the rule VP -> Aux V, which I later changed to Aux Vs to accomodate for different verb types and tenses. I also added VP -> Aux Vs NP, because although this could be generated by the rules VP -> VP NP | Aux Vs, I wanted to still add the rule to allow that structure to be generated with less recursion and one less level in the tree. The first sentence also includes a prepositional phrase, and so I added the rule NP -> NP PP, where preposition phrase PP -> Prep NP. I then added Prep -> of, and also added the appropriate adjectives, nouns, and verbs as terminal symbols. 

For the second sentence I decided to break up NP into more options and added NP -> DetSingular Adj NSingular. Later on I ended up creating a special case for all of these noun phrases and made NP -> NPSpecific | NPSpecific NP, and NPSpecific -> DetSingular Adj NSingular | DetPlural Adj NPlural | Adj NSingular | Adj NPlural | DetSingular NSingular | DetPlural NPlural. Even though this adds one more level to my tree, I decided that this made my grammar rules (particularly NP) more manageable and covered all the possibilities of nouns following determiners and adjectives. I also added adverbs for 'hardly', and so I expanded VP to also include VP -> Aux Adv VP to accomodate 'will hardly achieve (NP)' and adverbs into my grammar.

The third sentence was quite a bit more complicated, and required adding rules to include conjunctions and to allow nouns to precede nouns. This sentence also included a relative clause and an infinitive verb. Because of all of this I added NP -> NP RelativeClause PP, and RelativeClause -> RCConjunction VP, and RCConjunction -> that. I added NP -> N NP to allow for the noun compond parts of the sentence, like 'health care', which is a noun following a noun. I added the relative clause and relative clause conjunction ('that') to account for this kind of sentence structure (NP that VP PP). I also needed to add NP -> NP Conj NP to account for conjunctions in the sentence, as there were a couple. I also added NPlural and DetPlural. 'There' acts as a noun in this sentence, but I decided to make a separate rule for it because just adding it to NSingular made for sentences that really didn't make sense, so I added NThere -> there, and IndClause -> NThere VP. I decided that doing it this way would create sentences that made a little more sense and would keep my grammar simple. For the infinitive verb I added the rule VP -> VTakeInfinitive InfinitiveVP, VTakeInfinitive -> tend, and InfinitiveVP -> to IntransitiveV | to IntransitiveV Adv. I decided to create a VTakeInfinitive group because I wanted to group the verbs separately that are intended to go before infinitive verbs. I thought this would make my grammar simple and make slightly more logical sentences. Later when I added TransitiveV in addition to IntransitiveV I added InfinitiveVP -> to TransitiveV | to Transitive Adv, and even though it isn't required for (or used in) the five sentences I know 'be' is a special case so I decided to add InfinitiveVP -> to be | to be Adj | to be DetSingular NSingular | to be DetPlural NPlural (for things like 'to be or not to be', 'to be pretty', 'to be the teacher', etc.). I also decided to create a SpecialV that goes to SingularSpecialV and PluralSpecialV in order to be able to treat PluralSpecialV -> were, and SingularSpecialV -> was, differently than other verbs, and to take into account the singular version and plural version, even though only the plural version is used in the five sentences. 

The fourth sentence led to me adding S -> IndClause Conj IndClause and breaking sentence into S and IndClause to decrease recursion/stack overflow problems. I made sentence go to sentence level structures containing independent clauses, and independent clause go to what sentence went to before. This meant having S -> IndClause | IndClause Conj IndClause, and then having IndClause -> NP VP | NThere VP. This sentence also leads to a weird structure where a verb ('be') is followed by an adjective ('visible'), which is followed by a prepositional phrase, and my grammar at the time did not allow for a prepositional phrase to follow immediately after an adjective, so I added NP -> Adj PP. I made the decision that adding the adjective after the verb, even though it is connected to that, would make my grammar more complicated because it was more of a special case. I also added the category for pronouns because of this sentence and added NP -> Pronoun, and Pronoun -> it | he | she | you ('it' is the only one used in the five sentences). 

The fifth sentence uses the conjunction 'whether', which causes a very strange sentence structure, with a VP following a VP, with no NP in between. This is caused because 'whether' is a subordinating conjunction, and so I found the best way to accomodate this weird structure was to add a rule to S, to allow a sentence that begins with a subordinating conjunction (SubConj) to be followed by an independent clause followed by a verb phrase (S -> SubConj IndClause VP, SubConj -> whether). I know that 'decided' in this sentence is acting as a simple future passive verb, but I made the decision to treat it as an adjective to keep my grammar simpler, rather than making a separate class for this, because it essentially acts as an adjective, like 'visible' in 'will not be visible', and 'decided' is an adjective sometimes, and it will still create reasonable sentences by treating it as an adjective. 

The sixth sentence wasn't required, but I wanted to see how well my grammar could accomodate it, but it had the new sentence structure of beginning with an adverb because adverbs are a flexible part of the Enlgish language. This led me to add the rule IndClause -> Adv NP VP. 


Part II:
Below are my rules and the output created from running (targeted-sentence rulesx) in clisp after running (load "grammar_sks2187.lisp") where x is the number of the sentence. 

1. 
(defparameter rules1 '((S 0) (IndClause 0) (NP 5) (NPSpecific 2) (Adj 0) (NSingular 0) (VP 0) (VP 2) (Aux 0) (Vs 2) (TransitiveV 0) (NP 1) (NP 5) (NPSpecific 0) (DetSingular 0) (Adj 1) (NSingular 1) (PP 0) (Prep 0) (NP 2) (N 0) (NSingular 2)))

(HIGHER EDUCATION MUST COUNTER THE PREVAILING NARRATIVE OF POLARIZATION)

2. 
(defparameter rules2 '((S 0) (IndClause 0) (NP 5) (NPSpecific 0) (DetSingular 1) (Adj 4) (NSingular 7) (VP 3) (Aux 2) (Adv 1) (VP 0) (VP 4) (V 0) (Vs 2) (TransitiveV 1) (NP 5) (NPSpecific 0) (DetSingular 0) (Adj 5) (NSingular 8)))

(THIS FLAWED STRATEGY WILL HARDLY ACHIEVE THE DESIRED INTENT)

3.
(defparameter rules3 '((S 0) (IndClause 1) (NThere 0) (VP 0) (VP 4) (V 1) (SpecialV 1) (PluralSpecialV 0) (NP 0) (Adj 2) (NP 8) (N 0) (NSingular 3) (NP 1) (NP 2) (N 1) (NPlural 0) (PP 0) (Prep 1) (NP 3) (NP 5) (NPSpecific 5) (DetPlural 1) (NPlural 1) (RelativeClause 0) (RCConjunction 0) (VP 5) (VtakeInfinitive 0) (InfinitiveVP 1) (IntransitiveV 1) (Adv 0) (PP 0) (Prep 4) (NP 4) (NP 4) (NP 2) (N 0) (NSingular 4) (Conj 0) (NP 0) (Adj 3) (NP 2) (N 1) (NPlural 2) (Conj 0) (NP 8) (N 0) (NSingular 5) (NP 2) (N 0) (NSingular 6)))

(THERE WERE SOLID JOB GAINS IN SEVERAL INDUSTRIES THAT TEND TO PAY WELL SUCH AS BUSINESS AND PROFESSIONAL SERVICES AND HEALTH CARE)

4.
(defparameter rules4 '((S 2) (IndClause 0) (NP 5) (NPSpecific 4) (DetSingular 0) (NSingular 9) (VP 3) (Aux 2) (Adv 2) (VP 0) (VP 4) (V 0) (Vs 0) (IntransitiveV 3) (NP 6) (Adj 6) (PP 0) (Prep 2) (NP 5) (NPSpecific 0) (DetSingular 0) (Adj 7) (NSingular 10) (Conj 2) (IndClause 0) (NP 5) (NPSpecific 3) (Adj 8) (NPlural 3) (VP 0) (VP 7) (Aux 1) (VP 5) (VtakeInfinitive 1) (InfinitiveVP 6) (TransitiveV 2) (NP 1) (NP 7) (Pronoun 0) (PP 0) (Prep 3) (NP 2) (N 1) (NPlural 4)))

(THE ASTEROID WILL NOT BE VISIBLE TO THE NAKED EYE BUT AMATEUR ASTRONOMERS SHOULD BE ABLE TO SEE IT WITH TELESCOPES)

5.
(defparameter rules5 '((S 1) (SubConj 0) (IndClause 0) (NP 5) (NPSpecific 4) (DetSingular 0) (NSingular 11) (VP 0) (VP 2) (Aux 2) (Vs 2) (TransitiveV 3) (NP 1) (NP 9) (NPSpecific 4) (DetSingular 0) (NSingular 12) (NP 2) (N 0) (NSingular 13) (PP 0) (Prep 1) (NP 5) (NPSpecific 4) (DetSingular 0) (NSingular 14) (VP 0) (VP 2) (Aux 2) (Vs 0) (IntransitiveV 3) (NP 6) (Adj 9) (PP 0) (Prep 1) (NP 5) (NPSpecific 5) (DetPlural 2) (NPlural 5)))

(WHETHER THE PROSECUTION WILL SEEK THE DEATH PENALTY IN THE CASE WILL BE DECIDED IN A FEW WEEKS)

optional:
6.
(defparameter rules6 '((S 2) (IndClause 0) (NP 4) (NP 5) (NPSpecific 4) (DetSingular 0) (NSingular 11) (Conj 0) (NP 2) (N 0) (NSingular 15) (VP 1) (Aux 3) (Vs 1) (IntransitiveVPast 0) (NP 0) (Adj 10) (NP 2) (N 1) (NPlural 6) (Conj 0) (IndClause 2) (Adv 3) (NP 5) (NPSpecific 4) (DetSingular 0) (NSingular 16) (VP 2) (Aux 0) (Vs 0) (IntransitiveV 6)))

(THE PROSECUTION AND DEFENSE HAVE MADE THEIR CASES AND NOW THE JUDGE MUST DECIDE)


Part III:
For this part of the assignment, the first thing I did was modify random-sentence to be able to check the tree depth as it was recursing. I created a random-sentence-helper function that did the same things random-sentence did before, except that now it took into account the tree depth as an extra parameter, and stopped recusing when it hit this tree depth. I then started writing my validp function. In this function I checked the sentence and length and decided to reject sentences over 60 words long, and less than 2 words long. My grammar shouldn't be able to generate sentences with one word, but just in case I wanted to reject any sentence with only one word. I also wrote a function, check-multiples (and its helper function, check-in-list), to reject sentences where the same word appears twice except for all the prepositions, articles, conjunctions, and pronouns in my grammar (valid-repeated-words). After this I decided to write a function (limit-repeated-words) to reject sentences where the words that are allowed to repeat multiple times (prepositions, articles, conjunctions, and pronouns) appear more than a set number of times, which I chose to be 5 times. I know it is still a valid sentence if a preposition (or other) occurs more than 5 times, but I decided that those sentences would make less sense. I noticed that I had some weird sentences show up that had certain verbs showing up after auxiliary verbs that didn't really make sense, so I wrote check-form-after-aux to reject any sentences where those verbs showed up after any of the aux verbs in my grammar. I also noticed a few weird combinations of phrases that showed up, (THE THEIR) (WILL WELL) (SHOULD WILL), and wrote the function check-weird-things (and its helpers) to make sure those didn't show up at all anymore. At one point when I was limiting the tree depth I had a problem where non-terminals would appear in the sentence, and even though I fixed that, I decided to keep the function check-valid-words in that rejects any sentence that has a non-terminal, just in case. I used the functions given to us for writing to the file and doing the loop generating (loop-run), and so it will only generate one file, named "output_sks2187.txt", but if you want to just see the valid sentences you can run the command "grep ^+ output_sks2187.txt > valid.txt". 

I ran (loop-run 10000) to create output_sks2187.txt with both good and bad sentences, and then ran grep to generate valid.txt and invalid.txt for the valid and rejected sentences, respectively. 
